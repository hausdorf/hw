6 CONTEXT-FREE GRAMMARS
Grammars are the same any time you talk about them: they're just rules for putting things together. We focus here on context-free grammars.

6.1 PRODUCTIONS
Any grammar consists of:
	- variables, also called nonterminals
	- terminals, or symbols from the alphabet
	- productions, also called rules
Example: S -> 0S1; S -> \epsilon
	- the variable is S
		a. normally we use capital letters for variables
	- the terminals are 0 and 1
	- each statement marked with a -> is a production
So how does a grammar work?
	- A production, or rule, allows you to take some symbol, and replace it with whatever is to the right of the string.
	- A generated string is a (finite) string that if, starting with some variable S, you can apply productions and get that string as a result.
		a. This is called a DERIVATION.
		b. We will later see other grammars, but this one is called a context-free grammar. A context-free language is generated by this grammar.
	- CFGs tend to be recursive. This recursive nature allows for non-finite langauges, eg, {0^n1^n : n >= 0}
Example: palindromes
	- Consider: P -> aPa | bPb | \epsilon
	- Makes even-length palindromes.
FORMAL DEFINITION OF CONTEXT-FREE GRAMMAR:
	- 4-tuple(V, \sigma, S, P)
		a. V is the finite set of variables
		b. \sigma is a finite alphabet of terminals
		c. S is the start variable
		d. P is the finite set of productions, where each production has the form V -> (V \or \sigma)*

6.2 FURTHER EXAMPLES

